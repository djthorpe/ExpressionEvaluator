
%option reentrant
%option noyywrap
%option yylineno

%{
#import "PGLexer.h"
#import "PGLexer+Private.h"
#import "PGLexer+Tokens.h"
#define YY_EXTRA_TYPE void*
#define YY_INPUT(buf,bytes_read,max_size) { bytes_read = _PGLexer_input(yyextra,buf,max_size); }
#define YY_FATAL_ERROR(msg) { _PGLexer_fatal_error(msg); }
%}

HASH    [#]
ID	    [A-Za-z_][A-Za-z0-9_]*
FLOAT   [-+]?[0-9]+\.[0-9]+
OCTAL   [0][0-7]+
DECIMAL [-+]?[0-9]+
IP4ADDR [0-9][0-9]?[0-9]?\.[0-9][0-9]?[0-9]?\.[0-9][0-9]?[0-9]?\.[0-9][0-9]?[0-9]?
IP6ADDR ((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?
IPMASK  \/[0-9][0-9]?[0-9]?
HOSTNAME [A-Za-z0-9\.]+[A-Za-z0-9]
EQUALS	[=]
COMMA	[,]
WHITESP [\t ]+
NEWLINE \r?\n

%%

\'(\\.|[^\n\\'])*\'  { return PGLexerSQString; }
\"(\\.|[^\n\\"])*\"  { return PGLexerDQString; }
{FLOAT}            { return PGLexerFloat; }
{OCTAL}            { return PGLexerOctal; }
{DECIMAL}          { return PGLexerDecimal; }
{HASH}		       { return PGLexerHash; }
{EQUALS}	       { return PGLexerEquals; }
{COMMA}            { return PGLexerComma; }
{ID}		       { return PGLexerKeyword; }
{IP4ADDR}          { return PGLexerIP4Addr; }
{IP6ADDR}          { return PGLexerIP6Addr; }
{IPMASK}           { return PGLexerIPMask;  }
{HOSTNAME}         { return PGLexerHostname; }
[\@\+]{ID}         { return PGLexerGroupMap; }
{WHITESP}	       { return PGLexerWhitespace; }
{NEWLINE}	       { return PGLexerNewline; }
.			       { /* default rule */ return PGLexerOther; }

%%
