%{
  
//  Created by David Thorpe on 05/06/2006.
//  Copyright 2006 Somethin' Else Sound Directions Limited.
//  All rights reserved.
//
//  You may use and copy in accordance to the BSD License
//  included with this computer code.
//

#import "ExpressionParser.tab.h"
#import "Node.h"
#import "StringNode.h"
#import "NumberNode.h"
#import "IdentifierNode.h"
  
#undef YY_INPUT
#define YY_INPUT(b,r,s) (r = yyYYINPUT(b,s))
  
%}
%option reentrant
%option bison-bridge
%option bison-locations
%option noyywrap
%option yylineno

PM      [+-]
DIGIT   [0-9]
EX	    [Ee]{PM}?{DIGIT}+
ID	    [A-Za-z_][A-Za-z0-9_]*
TRUE	  [Tt][Rr][Uu][Ee]
FALSE	  [Ff][Aa][Ll][Ss][Ee]
WSP	    [ \t\r\n]
AND	    [Aa][Nn][Dd]
OR	    [Oo][Rr]
NOT	    [Nn][Oo][Tt]
COLON   [\:]
EQUALS  [=]
%%

\(			{	return LEFT_PAREN; }
\)			{ return RIGHT_PAREN; }
\,      { return COMMA; }
\+      { return FUNCTION_PLUS; }
\-      { return FUNCTION_MINUS; }
{DIGIT}*("."{DIGIT}*)?{EX}?	{	yylval.nodeValue = [NumberNode numberWithCString:yytext]; return NUMBER; }
\'(\\.|[^\\'])*\'         	{ yylval.nodeValue = [StringNode stringWithQuotedCString:yytext]; return STRING; }
\"(\\.|[^\\"])*\"         	{ yylval.nodeValue = [StringNode stringWithQuotedCString:yytext]; return STRING; }
{TRUE}			{	return VALUE_TRUE; }
{FALSE}			{	return VALUE_FALSE; }
{AND}       { return FUNCTION_AND; }
{OR}        { return FUNCTION_OR; }
{NOT}       { return FUNCTION_NOT; }
{EQUALS}    { return FUNCTION_EQUALS; }
{COLON}{EQUALS} { return FUNCTION_ASSIGN; }
{ID}			  { yylval.nodeValue = [IdentifierNode identifierWithCString:yytext]; return IDENTIFIER; }
%%


void yyerror(char* s) {
  extern Node* yylastParsedNode;  
  if(yylastParsedNode != nil) {
    yylastParsedNode = nil;
  }
  // raise syntax error
  [NSException raise:@"LexSyntaxError" format:@"%s",s];
}

int yywrap() {
  return -1;
}

void yyreset_state()
{
  BEGIN(INITIAL);
}


