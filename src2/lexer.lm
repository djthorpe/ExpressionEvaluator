%option reentrant
%option bison-bridge
%option bison-locations
%option noyywrap
%option yylineno

%{
#import "ParserContext.h"
#import "ParserContext+Bison.h"
#import "Node.h"
#import "y.tab.h"
#define YY_USER_ACTION yylloc->first_line = yylineno;
#define YY_EXTRA_TYPE ParserCtx*
	
#define YY_INPUT(buf,bytes_read,max_size)                                \
	{                                                                    \
	    ParserContext* p = [ParserContext parserForContext:yyextra];     \
	    if(p) {                                                          \
	        bytes_read = [p _inputToBuffer:buf maxBytesToRead:max_size]; \
        } else {                                                         \
            bytes_read = YY_NULL;                                        \
        }                                                                \
	}
%}

PM      [+-]
DIGIT   [0-9]
EX	    [Ee]{PM}?{DIGIT}+
ID	    [A-Za-z_][A-Za-z0-9_]*
TRUE	[Tt][Rr][Uu][Ee]
FALSE	[Ff][Aa][Ll][Ss][Ee]
WSP	    [ \t\r\n]
AND	    [Aa][Nn][Dd]
OR	    [Oo][Rr]
NOT	    [Nn][Oo][Tt]
COLON   [\:]
EQUALS  [=]

%%

\( {
	return LEFT_PAREN; 
}

\) {
	return RIGHT_PAREN;
}

{TRUE} {
	yylval->node = [Node booleanNode];
	return VALUE_BOOL;
}

{FALSE} {
	yylval->node = [Node booleanNode];
	return VALUE_BOOL;
}

{DIGIT}*("."{DIGIT}*)?{EX}? {
	yylval->node = [Node numberNode];
	return VALUE_NUMBER;
}

%%

@implementation ParserContext (Bison)

-(void)_initScanner {
	yylex_init(&(_scanner->scanner));
	yyset_extra(_scanner,_scanner->scanner);
}

-(void)_deallocScanner {
	yylex_destroy(_scanner->scanner);
}

-(int)_inputToBuffer:(char* )buffer maxBytesToRead:(size_t)maxBytesToRead {
	NSParameterAssert(_stream);
	if([_stream streamStatus]==NSStreamStatusAtEnd) {
		return YY_NULL;
	}
	if([_stream streamStatus]==NSStreamStatusClosed) {
		NSLog(@"_inputToBuffer: Unexpected state: NSStreamStatusClosed");
		return YY_NULL;
	}
	if([_stream streamStatus]==NSStreamStatusError) {
		NSLog(@"_inputToBuffer: Unexpected state: NSStreamStatusError");
		return YY_NULL;
	}
	if([_stream streamStatus]==NSStreamStatusNotOpen) {
		NSLog(@"_inputToBuffer: Unexpected state: NSStreamStatusNotOpen");
		return YY_NULL;
	}
	NSInteger bytesRead = [_stream read:(uint8_t* )buffer maxLength:(NSUInteger)maxBytesToRead];
	if(bytesRead==0) {
		return YY_NULL;
	}
	if(bytesRead < 0) {
		NSLog(@"_inputToBuffer: read operation failed");
		return YY_NULL;
	}
	return (int)bytesRead;
}

-(void)_raiseError:(const char* )error line:(int)lineno {
	NSLog(@"Error at line %d: %s",lineno,error);
}

@end

